// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"text.io/ent/link"
	"text.io/ent/predicate"
)

// LinkUpdate is the builder for updating Link entities.
type LinkUpdate struct {
	config
	hooks    []Hook
	mutation *LinkMutation
}

// Where appends a list predicates to the LinkUpdate builder.
func (lu *LinkUpdate) Where(ps ...predicate.Link) *LinkUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetLabel sets the "label" field.
func (lu *LinkUpdate) SetLabel(s string) *LinkUpdate {
	lu.mutation.SetLabel(s)
	return lu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (lu *LinkUpdate) SetNillableLabel(s *string) *LinkUpdate {
	if s != nil {
		lu.SetLabel(*s)
	}
	return lu
}

// ClearLabel clears the value of the "label" field.
func (lu *LinkUpdate) ClearLabel() *LinkUpdate {
	lu.mutation.ClearLabel()
	return lu
}

// SetURL sets the "url" field.
func (lu *LinkUpdate) SetURL(s string) *LinkUpdate {
	lu.mutation.SetURL(s)
	return lu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (lu *LinkUpdate) SetNillableURL(s *string) *LinkUpdate {
	if s != nil {
		lu.SetURL(*s)
	}
	return lu
}

// SetCreatedBy sets the "created_by" field.
func (lu *LinkUpdate) SetCreatedBy(s string) *LinkUpdate {
	lu.mutation.SetCreatedBy(s)
	return lu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lu *LinkUpdate) SetNillableCreatedBy(s *string) *LinkUpdate {
	if s != nil {
		lu.SetCreatedBy(*s)
	}
	return lu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (lu *LinkUpdate) ClearCreatedBy() *LinkUpdate {
	lu.mutation.ClearCreatedBy()
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LinkUpdate) SetCreatedAt(t time.Time) *LinkUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LinkUpdate) SetNillableCreatedAt(t *time.Time) *LinkUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// Mutation returns the LinkMutation object of the builder.
func (lu *LinkUpdate) Mutation() *LinkMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LinkUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LinkUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LinkUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LinkUpdate) check() error {
	if v, ok := lu.mutation.URL(); ok {
		if err := link.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Link.url": %w`, err)}
		}
	}
	return nil
}

func (lu *LinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Label(); ok {
		_spec.SetField(link.FieldLabel, field.TypeString, value)
	}
	if lu.mutation.LabelCleared() {
		_spec.ClearField(link.FieldLabel, field.TypeString)
	}
	if value, ok := lu.mutation.URL(); ok {
		_spec.SetField(link.FieldURL, field.TypeString, value)
	}
	if value, ok := lu.mutation.CreatedBy(); ok {
		_spec.SetField(link.FieldCreatedBy, field.TypeString, value)
	}
	if lu.mutation.CreatedByCleared() {
		_spec.ClearField(link.FieldCreatedBy, field.TypeString)
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(link.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LinkUpdateOne is the builder for updating a single Link entity.
type LinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinkMutation
}

// SetLabel sets the "label" field.
func (luo *LinkUpdateOne) SetLabel(s string) *LinkUpdateOne {
	luo.mutation.SetLabel(s)
	return luo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableLabel(s *string) *LinkUpdateOne {
	if s != nil {
		luo.SetLabel(*s)
	}
	return luo
}

// ClearLabel clears the value of the "label" field.
func (luo *LinkUpdateOne) ClearLabel() *LinkUpdateOne {
	luo.mutation.ClearLabel()
	return luo
}

// SetURL sets the "url" field.
func (luo *LinkUpdateOne) SetURL(s string) *LinkUpdateOne {
	luo.mutation.SetURL(s)
	return luo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableURL(s *string) *LinkUpdateOne {
	if s != nil {
		luo.SetURL(*s)
	}
	return luo
}

// SetCreatedBy sets the "created_by" field.
func (luo *LinkUpdateOne) SetCreatedBy(s string) *LinkUpdateOne {
	luo.mutation.SetCreatedBy(s)
	return luo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableCreatedBy(s *string) *LinkUpdateOne {
	if s != nil {
		luo.SetCreatedBy(*s)
	}
	return luo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (luo *LinkUpdateOne) ClearCreatedBy() *LinkUpdateOne {
	luo.mutation.ClearCreatedBy()
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LinkUpdateOne) SetCreatedAt(t time.Time) *LinkUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableCreatedAt(t *time.Time) *LinkUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// Mutation returns the LinkMutation object of the builder.
func (luo *LinkUpdateOne) Mutation() *LinkMutation {
	return luo.mutation
}

// Where appends a list predicates to the LinkUpdate builder.
func (luo *LinkUpdateOne) Where(ps ...predicate.Link) *LinkUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LinkUpdateOne) Select(field string, fields ...string) *LinkUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Link entity.
func (luo *LinkUpdateOne) Save(ctx context.Context) (*Link, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LinkUpdateOne) SaveX(ctx context.Context) *Link {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LinkUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LinkUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LinkUpdateOne) check() error {
	if v, ok := luo.mutation.URL(); ok {
		if err := link.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Link.url": %w`, err)}
		}
	}
	return nil
}

func (luo *LinkUpdateOne) sqlSave(ctx context.Context) (_node *Link, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Link.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, link.FieldID)
		for _, f := range fields {
			if !link.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != link.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Label(); ok {
		_spec.SetField(link.FieldLabel, field.TypeString, value)
	}
	if luo.mutation.LabelCleared() {
		_spec.ClearField(link.FieldLabel, field.TypeString)
	}
	if value, ok := luo.mutation.URL(); ok {
		_spec.SetField(link.FieldURL, field.TypeString, value)
	}
	if value, ok := luo.mutation.CreatedBy(); ok {
		_spec.SetField(link.FieldCreatedBy, field.TypeString, value)
	}
	if luo.mutation.CreatedByCleared() {
		_spec.ClearField(link.FieldCreatedBy, field.TypeString)
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(link.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Link{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
